"use client"
import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Brain, Send, BookOpen, Library, GraduationCap } from "lucide-react"
import type { Message, ChatResource } from "@/types"
import { ResourceCard } from "@/components/shared/ResourceCard"
import { ChatMessage } from "@/components/shared/Message"
import { cn } from "@/lib/utils"
import { MessageSkeleton } from "@/components/shared/MessageSkeleton"

// Dummy initial messages
const initialMessages: Message[] = [
  {
    id: "1",
    role: "user",
    content: "Can you explain photosynthesis in simple terms?",
    timestamp: "2024-01-29T10:00:00Z",
  },
  {
    id: "2",
    role: "assistant",
    content:
      "Photosynthesis is like a plant's kitchen where it makes its own food! ðŸŒ± Here's the simple version:\n\n1. The plant takes in:\n   - Sunlight (energy)\n   - Water from the soil\n   - Carbon dioxide from the air\n\n2. Using these ingredients, it creates:\n   - Glucose (sugar for food)\n   - Oxygen (which it releases into the air)\n\nWould you like me to explain any part of this process in more detail?",
    timestamp: "2024-01-29T10:00:05Z",
  },
  {
    id: "3",
    role: "user",
    content: "What happens to the glucose after it's created?",
    timestamp: "2024-01-29T10:01:00Z",
  },
  {
    id: "4",
    role: "assistant",
    content:
      "Great question! The glucose created during photosynthesis has several important uses:\n\n1. Immediate Energy: Some glucose is used right away for the plant's daily activities\n2. Storage: Extra glucose is converted into starch and stored in:\n   - Roots\n   - Stems\n   - Fruits\n   - Seeds\n3. Growth: Glucose is also used to make cellulose, which builds the plant's cell walls\n\nThink of it like a savings account - the plant saves extra energy for later use! ðŸŒ¿\n\nWould you like to see some visual resources about this process?",
    timestamp: "2024-01-29T10:01:05Z",
  },
]

// Dummy recommended resources
const recommendedResources: ChatResource[] = [
  {
    id: "1",
    title: "Photosynthesis Animation",
    type: "video",
    url: "#",
  },
  {
    id: "2",
    title: "Plant Cell Structure",
    type: "article",
    url: "#",
  },
  {
    id: "3",
    title: "Photosynthesis Quiz",
    type: "practice",
    url: "#",
  },
  {
    id: "4",
    title: "Key Concepts Summary",
    type: "summary",
    url: "#",
  },
]

const Page = () => {
  const [messages, setMessages] = useState<Message[]>(initialMessages)
  const [showResponse, setShowResponse] = useState(false)
  const [isGenerating, setIsGenerating] = useState(false)
  const [isTransitioning, setIsTransitioning] = useState(false)
  const [input, setInput] = useState("")

  const handleSend = async () => {
    if (!input.trim()) return

    const newMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: input,
      timestamp: new Date().toISOString(),
    }

    setMessages((prevMessages) => [...prevMessages, newMessage])
    setInput("")
    setShowResponse(true)
    setIsGenerating(true)

    // Simulate AI response delay
    await new Promise((resolve) => setTimeout(resolve, 2000))

    const aiResponse: Message = {
      id: (Date.now() + 1).toString(),
      role: "assistant",
      content: "This is a simulated AI response. In a real application, this would be generated by an AI model.",
      timestamp: new Date().toISOString(),
    }

    setMessages((prevMessages) => [...prevMessages, aiResponse])
    setIsGenerating(false)
  }

  useEffect(() => {
    if (showResponse) {
      setIsTransitioning(true)
      const timer = setTimeout(() => setIsTransitioning(false), 300)
      return () => clearTimeout(timer)
    }
  }, [showResponse])

  return (
    <main
      className={cn(
        "min-h-screen flex flex-col items-center px-4 py-8 md:py-12 transition-all duration-300 ease-in-out",
        isTransitioning && "opacity-0 translate-y-10",
        showResponse && "pb-24",
      )}
    >
      {!showResponse ? (
        <>
          <div className="text-center space-y-4 mb-8">
            <div className="size-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto">
              <Brain className="size-8 text-primary" />
            </div>
            <h1 className="text-2xl md:text-3xl font-bold">Talk to Your AI Tutor</h1>
            <p className="text-muted-foreground text-sm md:text-base max-w-md mx-auto">
              Choose a topic below or ask any question to start your personalized learning session
            </p>
          </div>

          {/* Quick Prompts Section */}
          <Card className="w-full max-w-2xl p-6 mb-8">
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <BookOpen className="size-4 text-muted-foreground" />
                <h2 className="text-sm font-medium">Popular Topics</h2>
              </div>
              <div className="flex flex-wrap gap-2">
                <Badge variant="secondary" className="cursor-pointer hover:bg-secondary/80">
                  Explain quantum physics
                </Badge>
                <Badge variant="secondary" className="cursor-pointer hover:bg-secondary/80">
                  Help with calculus
                </Badge>
                <Badge variant="secondary" className="cursor-pointer hover:bg-secondary/80">
                  Literature analysis
                </Badge>
                <Badge variant="secondary" className="cursor-pointer hover:bg-secondary/80">
                  Chemistry basics
                </Badge>
              </div>
            </div>
          </Card>

          {/* Study Resources Section */}
          <Card className="w-full max-w-2xl p-6 mb-8">
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <Library className="size-4 text-muted-foreground" />
                <h2 className="text-sm font-medium">Learning Resources</h2>
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                <Button variant="outline" className="justify-start">
                  <GraduationCap className="mr-2 size-4" />
                  Practice Problems
                </Button>
                <Button variant="outline" className="justify-start">
                  <BookOpen className="mr-2 size-4" />
                  Study Guides
                </Button>
                <Button variant="outline" className="justify-start">
                  <Library className="mr-2 size-4" />
                  Topic Summaries
                </Button>
                <Button variant="outline" className="justify-start">
                  <Brain className="mr-2 size-4" />
                  Concept Maps
                </Button>
              </div>
            </div>
          </Card>
        </>
      ) : (
        <Card className="w-full max-w-2xl p-6 mb-8 min-h-[400px] flex flex-col">
          <div className="flex-1 overflow-y-auto space-y-4 mb-4">
            {messages.map((message) => (
              <ChatMessage key={message.id} message={message} />
            ))}
            {isGenerating && <MessageSkeleton />}
          </div>

          {/* Resources Section */}
          {/* {messages.length > 0 && (
            <div className="border-t pt-4">
              <h3 className="text-sm font-medium mb-3">Recommended Resources</h3>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                {recommendedResources.map((resource) => (
                  <ResourceCard key={resource.id} resource={resource} />
                ))}
              </div>
            </div>
          )} */}
        </Card>
      )}

      <div className="w-full max-w-2xl">
        {/* Input Section */}
        <div className="relative">
          <Input
            placeholder="Ask anything... (e.g., 'Can you explain photosynthesis?')"
            className="pr-12 p-6"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={(e) => e.key === "Enter" && handleSend()}
            disabled={isGenerating}
          />
          <Button size="icon" className="absolute right-1 top-2 size-8" onClick={handleSend} disabled={isGenerating}>
            <Send className="size-4" />
            <span className="sr-only">Send message</span>
          </Button>
        </div>

        {/* Character Counter */}
        <div className="mt-2">
          <p className="text-xs text-muted-foreground text-right">{input.length}/2000</p>
        </div>
      </div>
    </main>
  )
}

export default Page

